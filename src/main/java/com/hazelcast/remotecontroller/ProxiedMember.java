/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hazelcast.remotecontroller;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-12-15")
public class ProxiedMember implements org.apache.thrift.TBase<ProxiedMember, ProxiedMember._Fields>, java.io.Serializable, Cloneable, Comparable<ProxiedMember> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProxiedMember");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROXY_HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyHost", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PROXY_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("proxyPort", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProxiedMemberStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProxiedMemberTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uuid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String host; // required
  public int port; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String proxyHost; // required
  public int proxyPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    HOST((short)2, "host"),
    PORT((short)3, "port"),
    PROXY_HOST((short)4, "proxyHost"),
    PROXY_PORT((short)5, "proxyPort");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // HOST
          return HOST;
        case 3: // PORT
          return PORT;
        case 4: // PROXY_HOST
          return PROXY_HOST;
        case 5: // PROXY_PORT
          return PROXY_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private static final int __PROXYPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROXY_HOST, new org.apache.thrift.meta_data.FieldMetaData("proxyHost", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROXY_PORT, new org.apache.thrift.meta_data.FieldMetaData("proxyPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProxiedMember.class, metaDataMap);
  }

  public ProxiedMember() {
  }

  public ProxiedMember(
    java.lang.String uuid,
    java.lang.String host,
    int port,
    java.lang.String proxyHost,
    int proxyPort)
  {
    this();
    this.uuid = uuid;
    this.host = host;
    this.port = port;
    setPortIsSet(true);
    this.proxyHost = proxyHost;
    this.proxyPort = proxyPort;
    setProxyPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProxiedMember(ProxiedMember other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.port = other.port;
    if (other.isSetProxyHost()) {
      this.proxyHost = other.proxyHost;
    }
    this.proxyPort = other.proxyPort;
  }

  public ProxiedMember deepCopy() {
    return new ProxiedMember(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    this.host = null;
    setPortIsSet(false);
    this.port = 0;
    this.proxyHost = null;
    setProxyPortIsSet(false);
    this.proxyPort = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUuid() {
    return this.uuid;
  }

  public ProxiedMember setUuid(@org.apache.thrift.annotation.Nullable java.lang.String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHost() {
    return this.host;
  }

  public ProxiedMember setHost(@org.apache.thrift.annotation.Nullable java.lang.String host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public ProxiedMember setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getProxyHost() {
    return this.proxyHost;
  }

  public ProxiedMember setProxyHost(@org.apache.thrift.annotation.Nullable java.lang.String proxyHost) {
    this.proxyHost = proxyHost;
    return this;
  }

  public void unsetProxyHost() {
    this.proxyHost = null;
  }

  /** Returns true if field proxyHost is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyHost() {
    return this.proxyHost != null;
  }

  public void setProxyHostIsSet(boolean value) {
    if (!value) {
      this.proxyHost = null;
    }
  }

  public int getProxyPort() {
    return this.proxyPort;
  }

  public ProxiedMember setProxyPort(int proxyPort) {
    this.proxyPort = proxyPort;
    setProxyPortIsSet(true);
    return this;
  }

  public void unsetProxyPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PROXYPORT_ISSET_ID);
  }

  /** Returns true if field proxyPort is set (has been assigned a value) and false otherwise */
  public boolean isSetProxyPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PROXYPORT_ISSET_ID);
  }

  public void setProxyPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PROXYPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((java.lang.String)value);
      }
      break;

    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.Integer)value);
      }
      break;

    case PROXY_HOST:
      if (value == null) {
        unsetProxyHost();
      } else {
        setProxyHost((java.lang.String)value);
      }
      break;

    case PROXY_PORT:
      if (value == null) {
        unsetProxyPort();
      } else {
        setProxyPort((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case HOST:
      return getHost();

    case PORT:
      return getPort();

    case PROXY_HOST:
      return getProxyHost();

    case PROXY_PORT:
      return getProxyPort();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case HOST:
      return isSetHost();
    case PORT:
      return isSetPort();
    case PROXY_HOST:
      return isSetProxyHost();
    case PROXY_PORT:
      return isSetProxyPort();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProxiedMember)
      return this.equals((ProxiedMember)that);
    return false;
  }

  public boolean equals(ProxiedMember that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_proxyHost = true && this.isSetProxyHost();
    boolean that_present_proxyHost = true && that.isSetProxyHost();
    if (this_present_proxyHost || that_present_proxyHost) {
      if (!(this_present_proxyHost && that_present_proxyHost))
        return false;
      if (!this.proxyHost.equals(that.proxyHost))
        return false;
    }

    boolean this_present_proxyPort = true;
    boolean that_present_proxyPort = true;
    if (this_present_proxyPort || that_present_proxyPort) {
      if (!(this_present_proxyPort && that_present_proxyPort))
        return false;
      if (this.proxyPort != that.proxyPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUuid()) ? 131071 : 524287);
    if (isSetUuid())
      hashCode = hashCode * 8191 + uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + port;

    hashCode = hashCode * 8191 + ((isSetProxyHost()) ? 131071 : 524287);
    if (isSetProxyHost())
      hashCode = hashCode * 8191 + proxyHost.hashCode();

    hashCode = hashCode * 8191 + proxyPort;

    return hashCode;
  }

  @Override
  public int compareTo(ProxiedMember other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUuid()).compareTo(other.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, other.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProxyHost()).compareTo(other.isSetProxyHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyHost, other.proxyHost);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProxyPort()).compareTo(other.isSetProxyPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProxyPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.proxyPort, other.proxyPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProxiedMember(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("proxyHost:");
    if (this.proxyHost == null) {
      sb.append("null");
    } else {
      sb.append(this.proxyHost);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("proxyPort:");
    sb.append(this.proxyPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProxiedMemberStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProxiedMemberStandardScheme getScheme() {
      return new ProxiedMemberStandardScheme();
    }
  }

  private static class ProxiedMemberStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProxiedMember> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProxiedMember struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.host = iprot.readString();
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROXY_HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.proxyHost = iprot.readString();
              struct.setProxyHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PROXY_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.proxyPort = iprot.readI32();
              struct.setProxyPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProxiedMember struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        oprot.writeString(struct.host);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.proxyHost != null) {
        oprot.writeFieldBegin(PROXY_HOST_FIELD_DESC);
        oprot.writeString(struct.proxyHost);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROXY_PORT_FIELD_DESC);
      oprot.writeI32(struct.proxyPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProxiedMemberTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProxiedMemberTupleScheme getScheme() {
      return new ProxiedMemberTupleScheme();
    }
  }

  private static class ProxiedMemberTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProxiedMember> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProxiedMember struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetHost()) {
        optionals.set(1);
      }
      if (struct.isSetPort()) {
        optionals.set(2);
      }
      if (struct.isSetProxyHost()) {
        optionals.set(3);
      }
      if (struct.isSetProxyPort()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetHost()) {
        oprot.writeString(struct.host);
      }
      if (struct.isSetPort()) {
        oprot.writeI32(struct.port);
      }
      if (struct.isSetProxyHost()) {
        oprot.writeString(struct.proxyHost);
      }
      if (struct.isSetProxyPort()) {
        oprot.writeI32(struct.proxyPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProxiedMember struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.host = iprot.readString();
        struct.setHostIsSet(true);
      }
      if (incoming.get(2)) {
        struct.port = iprot.readI32();
        struct.setPortIsSet(true);
      }
      if (incoming.get(3)) {
        struct.proxyHost = iprot.readString();
        struct.setProxyHostIsSet(true);
      }
      if (incoming.get(4)) {
        struct.proxyPort = iprot.readI32();
        struct.setProxyPortIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

